@page "/profile"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CoProject.Client.Forms
@using CoProject.Shared
@layout AuthLayout
@inject HttpClient _client
@inject NavigationManager _navManager
@inject SignOutSessionStateManager _signOutManager


<PageTitle>My Profile - CoProject</PageTitle>

<style>
    input[type='text'] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border-radius: 10px;
        border: 1px solid gray;
    }
    
    input[type="file"] {
        text-align: center;
        border: 1px solid grey;
        width: 50%;
        padding: 10px;
        box-sizing: border-box;
        border-radius: 6px;
        margin-top: 10px;
        display: block;
    }
    
    button {
        margin-left: auto;
        margin-right: auto;
        margin-top: 20px;
        margin-bottom: 30px;
        display: block;
        background-color: #0b4f6c;
        color: white;
        font-size: 20px;
        border: #707070;
        border-radius: 10px;
    }

    button[type='submit'] {
        height: 50px;
        width: 90%;
    }
    
    .form-btn {
        display: inline;
        margin-bottom: 0;
        margin-top: 5px;
        font-size: 15px;
        
        height: 30px;
        width: 20%;
    }

    .logout-btn {
        padding: 10px;
        width: 20%;
    }
    
    .student {
        background-color: darkgreen;
    }
    
    .supervisor {
        background-color: darkred;
    }
    
</style>


<div class="container">
    <div class="center">
        <h1>My Profile</h1>
        <hr/>
        <h2>Update your information</h2>
    </div>

    @if (_user == null)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        <EditForm Model="@_form" OnValidSubmit="@OnSubmit">
            <div class="profileImageContainer">
                <div class="innerProfileImage">
                    <img alt="profile image of user" src="@_profileImage"/>
                    <InputFile OnChange="OnInputFileChange"/>
                </div>
            </div>

            <DataAnnotationsValidator/>
            <label for="name" class="form-header"> Your name <span class="required">*</span></label>
            <InputText type="text" id="name" name="name" placeholder="Enter your new name here" @bind-Value="_form.Name"/>
            <ValidationMessage For="@(() => _form.Name)"/>

            <label for="email" class="form-header">Your email <span class="required">*</span></label>
            <InputText type="text" id="email" placeholder="Enter your new e-mail address here" @bind-Value="_form.Email"/>
            <ValidationMessage For="@(() => _form.Email)"/>

            <label for="email" class="form-header">Type<span class="required">*</span></label>
            <button class="form-btn @(_form.Supervisor ? "supervisor" : "student")" @onclick="() => _form.Supervisor = !_form.Supervisor" type="button">@(_form.Supervisor ? "Supervisor" : "Student")</button>

            <button type="submit">Update profile</button>
            <button class="logout-btn" type="button" @onclick="BeginLogout">Log out</button>
        </EditForm>
    }
</div>

@code {
    private readonly ProfileForm _form = new();
    private UserDetailsDTO? _user;
    private IBrowserFile? _selectedFile;
    private string _profileImage = "/images/noimage.jpeg";

    [CascadingParameter]
    public AuthLayout UsedLayout { get; set; } = null!;

    private async Task BeginLogout(MouseEventArgs args)
    {
        await _signOutManager.SetSignOutState();
        _navManager.NavigateTo("authentication/logout");
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await _client.GetAsync("/api/user");

        if (!response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/projects?error=Your profile could not be loaded, please try again later");
            return;
        }

        var user = await response.Content.ReadFromJsonAsync<UserDetailsDTO>();

        if (user != null)
        {
            _user = user;
            _profileImage = _user.Image;
            _form.Name = _user.Name;
            _form.Email = _user.Email;
            _form.Supervisor = _user.Supervisor;
        }
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _selectedFile = e.GetMultipleFiles()[0];
        await SetProfileImage();
        StateHasChanged();
    }

    private async Task SetProfileImage()
    {
        if (_selectedFile != null)
        {
            var bytes = new byte[_selectedFile.Size];
            await _selectedFile.OpenReadStream(2048000).ReadAsync(bytes);
            _profileImage = $"data:{_selectedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }

    private async void OnSubmit()
    {
        var update = new UserUpdateDTO(_form.Name, _form.Email)
        {
            Supervisor = _form.Supervisor
        };

        if (_selectedFile != null)
        {
            try
            {
                var stream = _selectedFile.OpenReadStream(2048000);
                var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();

                update.Image = new (_selectedFile.Name, ms.ToArray());
                ms.Close();
            }
            catch (Exception)
            {
                _navManager.NavigateTo("/profile?error=You can max upload 2MB images.");
                return;
            }
        }

        var response = await _client.PutAsJsonAsync("api/user", update);

        if (!response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo($"/profile?error={await response.Content.ReadAsStringAsync()}");
            return;
        }

        var user = UsedLayout.LoggedInUser;
        UsedLayout.LoggedInUser = new(user!.Id, user.Name, user.Email, update.Supervisor.Value, user.Image);

        await SetProfileImage();

        _navManager.NavigateTo($"/profile?success={await response.Content.ReadAsStringAsync()}");
    }

}