@page "/project/{Id}"
@inject NavigationManager _navManager
@layout AuthLayout
@inject HttpClient _client
@using CoProject.Shared;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>View Project - CoProject</PageTitle>

@if (_project == null)
{
    <p>Loading...</p>
}
else
{
    <h1 id="ProjectName">@_project.Name</h1>
    <h2 id="registered">Registered: @_project.Users.Count@(_project.Max != null && _project.Max > 0 ? $"/{_project.Max}" : "")</h2>

    <hr />

    <div class="supervisorContainer">
        <img class="imageOfSupervisor" alt="PICTURE OF SUPERVISOR" src="https://via.placeholder.com/150">
        <p class="supervisorName">@_project.Supervisor.Name</p>
        <p class="createdBy">Created on @_project.Created</p>
    </div>

    <p class="projectDescription">
        @_project.Description
    </p>

    <div class="tags">
        @foreach (var t in _project.Tags)
        {
            <p class="tagName">@t</p>
        }
    </div>

    @if (UsedLayout != null && UsedLayout.loggedInUser != null && !UsedLayout.loggedInUser.Supervisor)
    {
        <button id="joinProject">

            @if (!_userJoined)
            {
                <a @onclick="Join">Join project</a>
            }
            else
            {
                <a @onclick="Leave">Leave project</a>
            }

        </button>
    }

    @if (UsedLayout != null && UsedLayout.loggedInUser != null && UsedLayout.loggedInUser.Supervisor && UsedLayout.loggedInUser.Id == _project.Supervisor.Id)
    {

<div class="supervisorbuttons">
    <div class="supervisorsinglebutton">
        <a href="/editproject/@Id">
            <button type="button" id="editProject">Edit Project</button>
        </a>
    </div>

    <div class="supervisorsinglebutton">
        <button id="delete" @onclick=Delete>Delete</button>
    </div>
    
</div>


    }

    <hr />

    <p id="studentsRegistered">Students registered</p>

    <div id="bagOfStudents">

        @foreach (var u in _project.Users)
        {
            <div class="oneStudent">
                <div class="studentLeft">
                    <img class="studentImg" src="https://via.placeholder.com/150?text=student" alt="Image Of Student" />
                </div>
                <div class="studentRight">
                    <p class="student">@u.Name</p>
                    <p class="email">
                        @u.Email<img src="/images/copyIcon.svg" class="material-icons" />
                    </p>
                </div>
            </div>
        }
    </div>
}

@code {
    private ProjectDetailsDTO? _project;
    private bool _userJoined;

    [CascadingParameter]
    public AuthLayout? UsedLayout { get; set; }

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var projectResponse = await _client.GetAsync($"api/projects/{Id}");

        if (projectResponse.IsSuccessStatusCode && projectResponse.Content != null)
        {
            _project = await projectResponse.Content.ReadFromJsonAsync<ProjectDetailsDTO>();

            if (_project != null)
            {
                if (UsedLayout != null && UsedLayout.loggedInUser != null)
                {
                    foreach (var user in _project.Users)
                    {
                        Console.WriteLine(user.Id);
                    }
                    if (_project.Users.FirstOrDefault(u => u.Id == UsedLayout.loggedInUser.Id) != null)
                    {
                        _userJoined = true;
                    }
                }
                else
                {
                    _navManager.NavigateTo("/");
                }
            }
            else
            {
                _navManager.NavigateTo("/projects?error=" + projectResponse.Content);
            }
        }
        else
        {
            _navManager.NavigateTo("/projects?error=" + projectResponse.Content);
        }
    }

    private async void Join()
    {
        if (_project != null)
        {
            var response = await _client.PutAsJsonAsync($"api/projects/{_project.Id}/join", "");

            _navManager.NavigateTo(response.IsSuccessStatusCode ? $"/myprojects?success={await response.Content.ReadAsStringAsync()}" : $"/project/{Id}?error={await response.Content.ReadAsStringAsync()}");
        }
        else
        {
            _navManager.NavigateTo($"/project/{Id}?error=Project could not be found");
        }
    }

    private async void Leave()
    {
        if (_project != null)
        {
            var response = await _client.DeleteAsync($"api/projects/{_project.Id}/leave");

            _navManager.NavigateTo(response.IsSuccessStatusCode ? $"/myprojects?success={await response.Content.ReadAsStringAsync()}" : $"/project/{Id}?error={await response.Content.ReadAsStringAsync()}");
        }
        else
        {
            _navManager.NavigateTo($"/project/{Id}?error=Project could not be found");
        }
    }

    private async void Delete()
    {
        if (_project != null)
        {
            var response = await _client.DeleteAsync($"api/projects/{_project.Id}");

            _navManager.NavigateTo(response.IsSuccessStatusCode ? $"/projects?success={await response.Content.ReadAsStringAsync()}" : $"/projects?error={await response.Content.ReadAsStringAsync()}");
        }
        else
        {
            _navManager.NavigateTo($"/project/{Id}?error=Project could not be found");
        }
    }

}