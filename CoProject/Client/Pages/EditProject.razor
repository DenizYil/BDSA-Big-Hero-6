@page "/editproject/{id}"
@using CoProject.Client.Forms
@using CoProject.Shared
@using CoProject.Infrastructure.Entities
@layout AuthLayout
@inject HttpClient _client
@inject NavigationManager _navManager


<style>
    textarea {
        width: 100%;
        height: 150px;
        padding: 12px 20px;
        box-sizing: border-box;
        border-radius: 10px;
        resize: none;
        border-color: black;
        margin-top: 10px;
        border: 1px solid gray;
    }

    input[type=text] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border-radius: 10px;
        border: 1px solid gray;
    }

    input[type=number] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border-radius: 10px;
        border: 1px solid gray;
    }

    button[type="submit"] {
        cursor: pointer;
        margin-left: auto;
        margin-right: auto;
        margin-top: 20px;
        margin-bottom: 30px;
        display: block;
        background-color: #0b4f6c;
        color: white;
        font-size: 20px;
        border: #707070;
        border-radius: 5px;
        height: 50px;
        width: 300px;
    }
</style>

<PageTitle>Edit project - CoProject</PageTitle>
<div class="container">
    <div class="center">
        <h1>Edit Project</h1>
        <hr/>
        <h2>Edit the project by editing the inputs below</h2>
    </div>

    <EditForm Model="@_form" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator/>
        <div class="form">
            <label for="name" class="form-header">Project Name <span class="required">*</span></label>
            <InputText class="inputText" type="text" id="name" name="name" placeholder="Project name"
                       @bind-Value="_form.Name"/>

            <label for="description" class="form-header">Project Description <span class="required">*</span></label>
            <InputTextArea @bind-Value="_form.Description" class="inputTextArea" id="description"
                           placeholder="Write the description of the project"/>

            <label for="min" class="form-header">Students</label>
            <div class="min-max-container">
                <InputNumber class="inputNumber" @bind-Value="_form.Min" type="number" id="min" name="name"
                             placeholder="Minimum"/>
                <div class="line"></div>
                <InputNumber @bind-Value="_form.Max" class="inputNumber" type="number" id="max" name="name"
                             placeholder="Maximum"/>
            </div>

            <label for="tags" class="form-header">Project Tags</label>
            <InputText @bind-Value="_form.Tags" class="inputText" type="text" id="tags" name="name"
                       placeholder="Write the tags seperated by comma"/>

            <h3>Project State</h3>
            <div class="switch-field center">
                <p class="switch-item @(_form.State == State.Open ? "active-switch-item" : "")" @onclick="() => SwitchItem(State.Open)"
                   data-status="OPEN">
                    OPEN
                </p>
                <p class="switch-item @(_form.State == State.Closed ? "active-switch-item" : "")" @onclick="() => SwitchItem(State.Closed)"
                   data-status="CLOSED">
                    CLOSED
                </p>
                <p class="switch-item @(_form.State == State.Hidden ? "active-switch-item" : "")" @onclick="() => SwitchItem(State.Hidden)"
                   data-status="HIDDEN">
                    HIDDEN
                </p>
            </div>

            <button type="submit">Save changes</button>
        </div>
    </EditForm>
</div>


@code {

    [Parameter]
    public string? Id { get; set; }

    [CascadingParameter]
    public AuthLayout? usedLayout { get; set; }

    private readonly ProjectForm _form = new();
    private ProjectDetailsDTO _project;

    protected override async Task OnInitializedAsync()
    {
        var response = await _client.GetAsync($"api/projects/{Id}");

        if (!response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo($"/projects?error={await response.Content.ReadAsStringAsync()}");
            return;
        }

        _project = await response.Content.ReadFromJsonAsync<ProjectDetailsDTO>();

        if (_project == null)
        {
            _navManager.NavigateTo($"/projects?error={await response.Content.ReadAsStringAsync()}");
            return;
        }

        if (usedLayout.loggedInUser.Id != _project.Supervisor.Id)
        {
            _navManager.NavigateTo($"/projects?error={await response.Content.ReadAsStringAsync()}");
            return;
        }

        var tags = "";

        foreach (var tag in _project!.Tags)
        {
            tags += tag + ", ";
        }

        tags = tags.TrimEnd(',', ' ');

        _form.Name = _project!.Name;
        _form.Description = _project.Description;
        _form.Max = _project.Max;
        _form.Min = _project.Min;
        _form.Tags = tags;
        _form.State = _project.State;
    }

    private void SwitchItem(State state)
    {
        _form.State = state;
    }

    private async void OnSubmit()
    {
        var updateProject = new ProjectUpdateDTO
        {
            Name = _form.Name,
            Description = _form.Description,
            Max = _form.Max,
            Min = _form.Min,
            Tags = _form.Tags.Split(","),
            State = _form.State,
            Users = _project.Users.Select(e => e.Id).ToList()
        };
        var response = await _client.PutAsJsonAsync($"api/projects/{Id}", updateProject);

        _navManager.NavigateTo(response.IsSuccessStatusCode ? $"/project/{Id}?success={await response.Content.ReadAsStringAsync()}" : $"/project/{Id}?error={await response.Content.ReadAsStringAsync()}");
    }

}