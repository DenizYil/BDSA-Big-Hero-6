@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject HttpClient _client
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.RegularExpressions
@using System.Web
@using CoProject.Shared
@attribute [Authorize]


<div class="navbar">
    <NavBar/>
</div>

<CascadingValue Value="this">
    <div class="content">
        <div class="alert" style="display: @(ErrorBox() ? "block" : "none")">
            <span class="closebtn" @onclick="RemoveError">&times;</span>
            <strong>Oops!</strong> @ErrorMessage
        </div>
        
        <div class="success" style="display: @(SuccessBox() ? "block" : "none")">
            <span class="closebtn" @onclick="RemoveSuccess">&times;</span>
            <strong>Success!</strong> @SuccessMessage
        </div>

        @Body   
        

    </div>
</CascadingValue>


@code
{

    public UserDetailsDTO? loggedInUser = null;

    public string? SuccessMessage = "";
    public string? ErrorMessage = "";
    
    protected override async void OnInitialized()
    {

        SuccessMessage = HttpUtility.ParseQueryString(new Uri(Navigation.Uri).Query)["success"];
        ErrorMessage = HttpUtility.ParseQueryString(new Uri(Navigation.Uri).Query)["error"];

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user != null)
            {
                var userid = user.FindFirst("oid");

                if (userid != null)
                {
                    var response = await _client.GetAsync("/api/user");
                    if (response.IsSuccessStatusCode)
                    {
                        var userFind = await response.Content.ReadFromJsonAsync<UserDetailsDTO>();

                        if (userFind != null)
                        {
                            loggedInUser = userFind;
                            ShouldRender();
                            base.OnInitialized();
                        }
                    }
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
            } 
            else
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }
    

    private bool ErrorBox()
    {
        return Navigation.Uri.Contains("error=");
    }
    
    private bool SuccessBox()
    {
        return Navigation.Uri.Contains("success=");
    }

    private void RemoveError()
    {
        var uri = RemoveQueryStringByKey(Navigation.Uri, "error");
        Navigation.NavigateTo(uri);
    }
    
    private void RemoveSuccess()
    {
        var uri = RemoveQueryStringByKey(Navigation.Uri, "success");
        Navigation.NavigateTo(uri);
    }

    private static string RemoveQueryStringByKey(string url, string key)
    {
        var uri = new Uri(url);

        var newQueryString = HttpUtility.ParseQueryString(uri.Query);
        

        newQueryString.Remove(key);

        string pagePathWithoutQueryString = uri.GetLeftPart(UriPartial.Path);

        return newQueryString.Count > 0
            ? String.Format("{0}?{1}", pagePathWithoutQueryString, newQueryString)
            : pagePathWithoutQueryString;
    }
}