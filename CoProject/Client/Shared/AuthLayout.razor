@using CoProject.Shared
@using Microsoft.AspNetCore.Authorization
@using System.Web
@inherits LayoutComponentBase
@inject NavigationManager _navManager
@inject HttpClient _client
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize]


<div class="navbar">
    <NavBar/>
</div>

<CascadingValue Value="this">
    <div class="content">
        <div class="alert" style="display: @(ErrorBox() ? "block" : "none")">
            <span class="closebtn" @onclick="RemoveError">&times;</span>
            <strong>Oops!</strong> @ErrorMessage
        </div>

        <div class="success" style="display: @(SuccessBox() ? "block" : "none")">
            <span class="closebtn" @onclick="RemoveSuccess">&times;</span>
            <strong>Success!</strong> @SuccessMessage
        </div>

        @if (LoggedInUser != null)
        {
            @Body
        }
        else
        {
            <LoadingComponent></LoadingComponent>
        }
    </div>
</CascadingValue>


@code
{

    public UserDetailsDTO? LoggedInUser;

    public string? SuccessMessage = "";
    public string? ErrorMessage = "";

    protected override Task OnParametersSetAsync()
    {
        SuccessMessage = HttpUtility.ParseQueryString(new Uri(_navManager.Uri).Query)["success"];
        ErrorMessage = HttpUtility.ParseQueryString(new Uri(_navManager.Uri).Query)["error"];
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            
            var user = authState.User;
            var userid = user.FindFirst("oid");

            if (userid != null)
            {
                var response = await _client.GetAsync("/api/user");
                if (response.IsSuccessStatusCode)
                {
                    var userFind = await response.Content.ReadFromJsonAsync<UserDetailsDTO>();

                    if (userFind != null)
                    {
                        LoggedInUser = userFind;
                    }
                }
            }
            else
            {
                _navManager.NavigateTo("/");
            }
        
        }
        catch (Exception)
        {
            _navManager.NavigateTo("/");
        }
    }


    private bool ErrorBox()
    {
        return _navManager.Uri.Contains("error=");
    }

    private bool SuccessBox()
    {
        return _navManager.Uri.Contains("success=");
    }

    private void RemoveError()
    {
        var uri = RemoveQueryStringByKey(_navManager.Uri, "error");
        _navManager.NavigateTo(uri);
    }

    private void RemoveSuccess()
    {
        var uri = RemoveQueryStringByKey(_navManager.Uri, "success");
        _navManager.NavigateTo(uri);
    }

    private static string RemoveQueryStringByKey(string url, string key)
    {
        var uri = new Uri(url);

        var newQueryString = HttpUtility.ParseQueryString(uri.Query);


        newQueryString.Remove(key);

        var pagePathWithoutQueryString = uri.GetLeftPart(UriPartial.Path);

        return newQueryString.Count > 0 ? $"{pagePathWithoutQueryString}?{newQueryString}" : pagePathWithoutQueryString;
    }
}