@page "/createproject"
@inherits LayoutComponentBase
@using Models.Project
@using System.Net.Http
@using System.Threading.Tasks
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http
@layout AuthLayout

<PageTitle>Create Project - CoProject</PageTitle>

<style>
    textarea {
        width: 100%;
        height: 150px;
        padding: 12px 20px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 10px;
        resize: none;
        border-color: black;
        border-width: 2px;
        margin-top: 10px;
        border: 1px solid gray;
    }

    input[type=text] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border-radius: 10px;
        border: 1px solid gray;
    }

    input[type=number] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border-radius: 10px;
        border: 1px solid gray;
    }
</style>

<div class="container">

    <div class="center">
        <h1>Create Project</h1>
        <hr />
        <h2>Fill in the information below to create a new project.</h2>
    </div>

    <EditForm Model="@projectModel" OnValidSubmit="@OnSubmit">
        <div class="form">
            <label for="name" class="form-header">Project Name <span class="required">*</span></label>
            <InputText class="inputText" type="text" id="name" name="name" placeholder="Project name" @bind-Value="projectModel.Name" />

            <label for="description" class="form-header">Project Description <span class="required">*</span></label>
            <InputTextArea @bind-Value="projectModel.Description" class="inputTextArea" id="description" placeholder="Write the description of the project" />

            <label for="min" class="form-header">Students</label>
            <div class="min-max-container">
                <InputNumber class="inputNumber" @bind-Value="projectModel.studentMin" type="number" id="min" name="name" placeholder="Minimum" />
                <div class="line"></div>
                <InputNumber @bind-Value="projectModel.studentMax" class="inputNumber" type="number" id="max" name="name" placeholder="Maximum" />
            </div>

            <label for="tags" class="form-header">Project Tags</label>
            <InputText @bind-Value="projectModel.tags" class="inputText" type="text" id="tags" name="name" placeholder="Write the tags seperated by comma" />

            <h3>Project State</h3>
            <InputSelect class="inputText" @bind-Value="projectModel.state">
                <option value="">Select state</option>
                <option value="1">OPEN</option>
                <option value="2">CLOSED</option>
                <option value="3">HIDDEN</option>
            </InputSelect>
            <div class="switch-field center">
                <p class="switch-item active-switch-item" data-status="OPEN">OPEN</p>
                <p class="switch-item" data-status="CLOSED">CLOSED</p>
                <p class="switch-item" data-status="HIDDEN">HIDDEN</p>
            </div>


            <button type="submit" class="submitButton">Create Project</button>
        </div>
    </EditForm>
</div>


@code {

    private ProjectForm projectModel = new();
    public class ProjectForm
    {

        [Required]
        [StringLength(100, ErrorMessage = "Name is too long")]
        public string Name { get; set; }

        [Required]
        public string Description { get; set; }

        public int? studentMin { get; set; }

        public int? studentMax { get; set; }

        public string? tags { get; set; }

        public int state { get; set; }
    }

    private async void OnSubmit()
    {
        var addItem = new ProjectCreateDTO() { Name = projectModel.Name, Description = projectModel.Description, Max = projectModel.studentMax, Min = projectModel.studentMin, State = 1, Tags = projectModel.tags.Split(","), SupervisorId = 123  };
        var response = await Http.PostAsJsonAsync("/projects", addItem);

        Console.WriteLine(response.StatusCode);
    }
}